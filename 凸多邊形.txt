#include<stdio.h>
#include<stdlib.h>
#include<math.h>
#include<string.h>
#include <conio.h>
#define N 100
#define MAXLEN 100
#define PI 3.14159265


/* 用點陣列來儲存點資訊，另外用雙向鏈結來存取我們所要的點 */
typedef struct list               /* 向鏈結list*/
{				
	int number;		//編號 
	struct list* prev;		/* 前一個 */ 
	struct list* next;		/* 後一個 */
} list;
list *head = NULL;			/* list頭 */
int n = 0;					/* 點數 */
typedef struct P                /* 點資訊 */
{					
	double x;				/* 座標 */
	double y;				/* 座標 */
	double d;				/* 離判斷點的距離 */
} P;   
P p[N];					/* 點陣列 */


int cmp( const void* a, const void* b ); 	/* 比較a、b的大小，用於qsort */
void readpoints();						/* 輸入點 */
double ccw(int i, int j, int k);				/* 判斷外角是否大於180度 */
void proc();							/* 主要處理函式 */
void sort();							/* 根據判斷點排序 */
void addlist(int number);					/* 將一點加入雙向鏈結 */
void deletelist(list* now);				/* 將一點由雙向鏈結刪除*/
double angle(double x, double y);	/* 判斷和判斷點的角度，用於排序 */


/* 如果輸入點數小於3，直接輸出結果，否則先排序然後進入處理程序 */
int main()
{
	readpoints();
	switch(n)
	{
	case 0:
		printf("無輸入.\n");
		break;
	case 1:
		printf("結果: (%lf , %lf)\n", p[0].x, p[0].y);
		break;
	default:sort();   /* 排序函式 */
		proc();   /* 處理函式 */
	}    
	printf("請按任意鍵繼續.\n");
	getch();  
	return 0;
}


/* 比較a、b的大小，用於qsort */
void readpoints()
{
	char buf[MAXLEN] = "";
	char* ptr = NULL;

	printf("請輸入點資訊. 一行為一個點. 每點的格式為: X座標  空格  Y座標\n");
	printf("結束輸入請直接輸入ENTER. \n");
	printf("注意: 錯誤的輸入會導致該座標為0. \n");    
	fgets(buf, sizeof(buf), stdin);           	/* 由stdin擷取資料 */
	while (buf[0] != '\n' && buf[0] != EOF) 
		/* 直接預到換行或檔案結尾時停止 */
	{ 	
		p[n].x = atof(buf);				/* 將字串轉換成double */

		strtok(buf, " ");
		ptr = strtok(NULL, " ");

		if(ptr != NULL)				
			p[n].y = atof(ptr);
		else  /* Y座標擷取錯誤時，表示輸入錯誤，重新輸入該點 */
		{			
			printf("第 %d 點輸入錯誤. 請重新輸入這個點.\n", n + 1);
			fgets(buf, sizeof(buf), stdin);
			continue;
		}


		++n; 
		if(n == N)  /* 最大點數判斷 */
		{			
			printf("已到最大點數, 無法再輸入.\n");
			break;     
		}
		fgets(buf, sizeof(buf), stdin);
	}
	printf("輸入結束.結果: \n");
}


/* 判斷外角是否大於180度，i j k為點陣列index，j為角的中心，如回傳小於0則不刪除 */ 
double ccw(int i, int j, int k)
{
	double a, b, c, d, result;
	if(i < 0)		/* index超出限定，直接回傳 */
		return -1;
	a = p[i].x - p[j].x;
	b = p[i].y - p[j].y;
	c = p[k].x - p[j].x;
	d = p[k].y - p[j].y;
	result = a*d - b*c;
	if(result == 0 && a*c > 0)  /* 角度為0時 */
		return -1;
	return result; 
}


/* 主要處理函式 */
void proc()
{
	list* now;
	addlist(n - 1); /* 先加入最後一點跟第一點進list */
	addlist(0);
	now = head->next;
	while(now->number != n - 1)  /* 判斷到最後第2點 */
	{ 
		addlist(now->number + 1); /* 加入下一點 */

		/* 判斷是否該刪除 */
		while(ccw(now->prev->number, now->number, now->next->number) >= 0)
		{
			now = now->prev;
			deletelist(now->next);
			if(now->number == n - 1)  /* 不刪除最後一點 */
				break;
		}
		now = now->next;
	}
	now->prev->next = NULL;  /* 刪除多加的最後一點 */
	free(now);

	now = head;
	while(now != NULL)   /* 輸出結果 */
	{ 
		printf("(%.lf , %.lf) ", p[now->number].x, p[now->number].y);
		now = now->next;
	}
	printf("\n");

	while(head != NULL)   /* 清除記憶體 */
	{ 
		now = head;
		head = head->next;
		free(now);
	}

}


/* 將一點加入雙向鏈結，並接好鍵結 */
void addlist(int number)
{
	list* tmp = head;
	if(head == NULL)  /* list是空的時候 */
	{ 
		head = (list*) malloc( sizeof(list) );
		head->number = number;
		head->next = NULL;
		head->prev = NULL;
	}
	else
	{
		while(tmp->next != NULL)
			tmp = tmp->next;
		tmp->next = (list*) malloc( sizeof(list) );
		tmp->next->prev = tmp;
		tmp->next->number = number;
		tmp->next->next = NULL;

	}
} 

/* 將一點由雙向鏈結刪除，並接好鍵結 */
void deletelist(list* tmp)
{
	if(tmp == NULL)
		return;
	tmp->prev->next = tmp->next;
	tmp->next->prev = tmp->prev;
	free(tmp); 
}


/* 根據判斷點的x、y向量來計算該判斷點的角度，用於排序 */
double angle(double x, double y)
{

	if(x == 0 )
	{	
		if(y == 0)
			return 0;  /* 零向量輸出角度0 */
		else
			return (y < 0)? 270 : 90;
	}

	if(x > 0)
		return  atan(y / x) * 180 / PI;
	else
		return  atan(y / x) * 180 / PI + 180;
}
/* 角度如下圖方式判斷，輸出為角度，將判斷點拉到原點作判斷 */


/* 根據判斷點排序：以前3點的中心為判斷點，先計算所有點根據判斷點的角度來排序，若角度相同再以距離排序 */
void sort()
{
	int i, counter = 1;
	P* tmp = &p[0];
	P o;
	o.x = (p[0].x + p[1].x + p[2].x) / 3.0;   /*以前3點的中心為判斷點 */
	o.y = (p[0].y + p[1].y + p[2].y) / 3.0;

	for(i = 0; i < n; ++i)				/* 計算每點角度 */
		p[i].d = angle(p[i].x - o.x, p[i].y - o.y);

	qsort(p, n, sizeof(P), cmp);		/* 根據角度排序 */

	/* 如果角度相同，則用離判斷點的距離來排序 */
	for(i = 1; i < n; ++i){			
		if(p[i].d == p[i - 1].d)  /* 計算相同角度數目，並算出距離 */
		{ 
			++counter;
			p[i - 1].d = (p[i - 1].x - o.x) * (p[i - 1].x - o.x) + (p[i - 1].y - o.y) * (p[i - 
				1].y - o.y);

		}
		else
		{
			if(counter != 1)  /* 當有相同角度時，重新排序 */
			{  
				p[i - 1].d = (p[i - 1].x - o.x) * (p[i - 1].x - o.x) + (p[i - 1].y - o.y) * 
					(p[i - 1].y - o.y);
				qsort(tmp, counter, sizeof(P), cmp);
			}
			counter = 1;  /* 還原已做下次判斷 */
			tmp = &p[i];

		}
	}
	if(counter != 1)   /* 最後一點 */
	{
		p[i - 1].d = (p[i - 1].x - o.x) * (p[i - 1].x - o.x) + (p[i - 1].y - o.y) * (p[i - 1].y -
			o.y);
		qsort(tmp, counter, sizeof(P), cmp);
	}
}



/* 比較a、b的大小，用於qsort判斷式。輸出：-1: a<b；0: a=b；1: a>b */
int cmp( const void* a, const void* b ) 
{
	P* arg1 = (P*) a;
	P* arg2 = (P*) b;
	if( (*arg1).d < (*arg2).d ) 
		return -1;
	else if( (*arg1).d == (*arg2).d ) 
		return 0;
	else 
		return 1;
}

