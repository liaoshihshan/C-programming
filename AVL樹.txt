#include<stdio.h>
#include <stdlib.h>
typedef struct node{
	int key,height;//height為節點高度
	struct node *left,*right;//左節點、右節點
}Node;//節點結構

int getheight(Node* ptr)//取得節點所在高度
{
	return (ptr == NULL)? 0: ptr->height;
}

int max(int a,int b)//取最大值
{
	if(a > b)
		return a;
	else
		return b;
}

Node* rotateLL(Node * t)//LL旋轉
{
	Node *newnode;
	newnode = t->left;
	t->left = newnode->right;
	newnode->right = t;
	t->height = max(getheight(t->left),getheight(t->right));
	newnode->height = 1 + max(getheight(newnode->left),getheight(t));
	return newnode;
}

Node* rotateRR(Node *t)//RR旋轉
{
	Node *newnode;
	newnode = t->right;
	t->right = newnode->left;
	newnode->left = t;
	//更新高度值
	t->height = 1 + max(getheight(t->left),getheight(t->right));
	newnode->height = 1 + max(getheight(newnode->left),getheight(t));
	return newnode;
}

Node* rotateLR(Node *t)//LR旋轉
{
	t->left = rotateRR(t->left);
	return rotateLL(t);
}

Node* rotateRL(Node *t)//RL旋轉
{
	t->right = rotateLL(t->right);
	return rotateRR(t);
}

Node* insertnode(Node *t,int key)//新增節點到AVL樹
{
	if(t == NULL)//建立新節點
	{
		t = (Node *)malloc(sizeof(Node));
		t->key = key;
		t->height = 0;
		t->left = t->right = NULL;
	}
	else if(key < t->key)//插入左子樹
	{
		t->left = insertnode(t->left,key);
		if(getheight(t->left) - getheight(t->right) == 2)
		{
			if(key < t->left->key)
				t = rotateLL(t);
			else
				t = rotateLR(t);
		}
	}
	else//插入右子樹
	{
		t->right = insertnode(t->right,key);
		if(getheight(t->right) - getheight(t->left) == 2)
		{
			if(key > t->right->key)
				t = rotateRR(t);
			else
				t = rotateRL(t);
		}
	}
	//更新高度值
	t->height = 1 + max(getheight(t->left),getheight(t->right));
	return t;
}

void inorder(Node* ptr)//中序走訪
{
	if(ptr != NULL)
	{
		inorder(ptr->left);
		printf("%d\t",ptr->key);
		inorder(ptr->right);
	}
}

void main()
{
	Node* avltreenode = NULL;
	avltreenode = insertnode(avltreenode,5);
	avltreenode = insertnode(avltreenode,6);
	avltreenode = insertnode(avltreenode,3);
	avltreenode = insertnode(avltreenode,8);
	inorder(avltreenode);
	system("pause");
}

